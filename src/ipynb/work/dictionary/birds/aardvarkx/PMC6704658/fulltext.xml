<!DOCTYPE article
PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" article-type="research-article"><?properties open_access?><?DTDIdentifier.IdentifierValue -//Springer-Verlag//DTD A++ V2.4//EN?><?DTDIdentifier.IdentifierType public?><?SourceDTD.DTDName A++V2.4.dtd?><?SourceDTD.Version 2.4?><?ConverterInfo.XSLTName springer2nlmx2.xsl?><?ConverterInfo.Version 1?><front><journal-meta><journal-id journal-id-type="nlm-ta">BMC Bioinformatics</journal-id><journal-id journal-id-type="iso-abbrev">BMC Bioinformatics</journal-id><journal-title-group><journal-title>BMC Bioinformatics</journal-title></journal-title-group><issn pub-type="epub">1471-2105</issn><publisher><publisher-name>BioMed Central</publisher-name><publisher-loc>London</publisher-loc></publisher></journal-meta><article-meta><article-id pub-id-type="publisher-id">2967</article-id><article-id pub-id-type="doi">10.1186/s12859-019-2967-2</article-id><article-categories><subj-group subj-group-type="heading"><subject>Research Article</subject></subj-group></article-categories><title-group><article-title>Shared data science infrastructure for genomics data</article-title></title-group><contrib-group><contrib contrib-type="author" corresp="yes"><contrib-id contrib-id-type="orcid">http://orcid.org/0000-0003-1540-7797</contrib-id><name><surname>Bagheri</surname><given-names>Hamid</given-names></name><address><email>hbagheri@iastate.edu</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><contrib contrib-type="author"><name><surname>Muppirala</surname><given-names>Usha</given-names></name><address><email>usha@iastate.edu</email></address><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author"><name><surname>Masonbrink</surname><given-names>Rick E.</given-names></name><address><email>remkv6@iastate.edu</email></address><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author"><name><surname>Severin</surname><given-names>Andrew J.</given-names></name><address><email>severin@iastate.edu</email></address><xref ref-type="aff" rid="Aff2">2</xref></contrib><contrib contrib-type="author"><name><surname>Rajan</surname><given-names>Hridesh</given-names></name><address><email>hridesh@iastate.edu</email></address><xref ref-type="aff" rid="Aff1">1</xref></contrib><aff id="Aff1"><label>1</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 7312</institution-id><institution-id institution-id-type="GRID">grid.34421.30</institution-id><institution>Department of Computer Science, </institution><institution>Iowa State University, </institution></institution-wrap>226 Atanasoff Hall, Ames, 50011 USA </aff><aff id="Aff2"><label>2</label><institution-wrap><institution-id institution-id-type="ISNI">0000 0004 1936 7312</institution-id><institution-id institution-id-type="GRID">grid.34421.30</institution-id><institution>Genome Informatics Facility, </institution><institution>Iowa State University, </institution></institution-wrap>206 Science I, Ames, 50011 USA </aff></contrib-group><pub-date pub-type="epub"><day>22</day><month>8</month><year>2019</year></pub-date><pub-date pub-type="pmc-release"><day>22</day><month>8</month><year>2019</year></pub-date><pub-date pub-type="collection"><year>2019</year></pub-date><volume>20</volume><elocation-id>436</elocation-id><history><date date-type="received"><day>2</day><month>4</month><year>2019</year></date><date date-type="accepted"><day>25</day><month>6</month><year>2019</year></date></history><permissions><copyright-statement>&#x000a9; The Author(s). 2019</copyright-statement><license license-type="OpenAccess"><license-p><bold>Open Access</bold>This article is distributed under the terms of the Creative Commons Attribution 4.0 International License (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/licenses/by/4.0/">http://creativecommons.org/licenses/by/4.0/</ext-link>), which permits unrestricted use, distribution, and reproduction in any medium, provided you give appropriate credit to the original author(s) and the source, provide a link to the Creative Commons license, and indicate if changes were made. The Creative Commons Public Domain Dedication waiver (<ext-link ext-link-type="uri" xlink:href="http://creativecommons.org/publicdomain/zero/1.0/">http://creativecommons.org/publicdomain/zero/1.0/</ext-link>) applies to the data made available in this article, unless otherwise stated.</license-p></license></permissions><abstract id="Abs1"><sec><title>Background</title><p id="Par1">Creating a scalable computational infrastructure to analyze the wealth of information contained in data repositories is difficult due to significant barriers in organizing, extracting and analyzing relevant data. Shared data science infrastructures like Boa<sub><italic>g</italic></sub> is needed to efficiently process and parse data contained in large data repositories. The main features of Boa<sub><italic>g</italic></sub> are inspired from existing languages for data intensive computing and can easily integrate data from biological data repositories.</p></sec><sec><title>Results</title><p id="Par2">As a proof of concept, Boa for genomics, Boa<sub><italic>g</italic></sub>, has been implemented to analyze RefSeq&#x02019;s 153,848 annotation (GFF) and assembly (FASTA) file metadata. Boa<sub><italic>g</italic></sub> provides a massive improvement from existing solutions like Python and MongoDB, by utilizing a domain-specific language that uses Hadoop infrastructure for a smaller storage footprint that scales well and requires fewer lines of code. We execute scripts through Boa<sub><italic>g</italic></sub> to answer questions about the genomes in RefSeq. We identify the largest and smallest genomes deposited, explore exon frequencies for assemblies after 2016, identify the most commonly used bacterial genome assembly program, and address how animal genome assemblies have improved since 2016. Boa<sub><italic>g</italic></sub> databases provide a significant reduction in required storage of the raw data and a significant speed up in its ability to query large datasets due to automated parallelization and distribution of Hadoop infrastructure during computations.</p></sec><sec><title>Conclusions</title><p id="Par3">In order to keep pace with our ability to produce biological data, innovative methods are required. The Shared Data Science Infrastructure, Boa<sub><italic>g</italic></sub>, provides researchers a greater access to researchers to efficiently explore data in new ways. We demonstrate the potential of a the domain specific language Boa<sub><italic>g</italic></sub> using the RefSeq database to explore how deposited genome assemblies and annotations are changing over time. This is a small example of how Boa<sub><italic>g</italic></sub> could be used with large biological datasets.</p></sec></abstract><kwd-group xml:lang="en"><title>Keywords</title><kwd>Shared Data Science Infrastructure</kwd><kwd>Domain-Specific Language</kwd><kwd>Boa<sub><italic>g</italic></sub></kwd><kwd>Genome Annotation</kwd></kwd-group><funding-group><award-group><funding-source><institution>National Science Foundation (US)</institution></funding-source><award-id>(CCF-15-18897)</award-id><principal-award-recipient><name><surname>Rajan</surname><given-names>Hridesh</given-names></name></principal-award-recipient></award-group></funding-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100000001</institution-id><institution>National Science Foundation</institution></institution-wrap></funding-source><award-id>(CNS-15-13263)</award-id><principal-award-recipient><name><surname>Rajan</surname><given-names>Hridesh</given-names></name></principal-award-recipient></award-group></funding-group><funding-group><award-group><funding-source><institution-wrap><institution-id institution-id-type="FundRef">http://dx.doi.org/10.13039/100009227</institution-id><institution>Iowa State University</institution></institution-wrap></funding-source><award-id>(Presidential Initiative)</award-id><principal-award-recipient><name><surname>Rajan</surname><given-names>Hridesh</given-names></name></principal-award-recipient></award-group></funding-group><custom-meta-group><custom-meta><meta-name>issue-copyright-statement</meta-name><meta-value>&#x000a9; The Author(s) 2019</meta-value></custom-meta></custom-meta-group></article-meta></front><body><sec id="Sec1"><title>Background</title><p id="Par8">As sequencing data continues to pile up in the online repositories [<xref ref-type="bibr" rid="CR1">1</xref>], scientists can increasingly use multi-tiered data to better answer biological questions. A major barrier to these analyses lies with attaining a scalable computational infrastructure that is available to domain experts with minimal programing knowledge. The lengthy time investment required for data wrangling tasks like organization, extraction, and analysis is increasing and is a well-known problem in bioinformatics [<xref ref-type="bibr" rid="CR2">2</xref>]. As this trend continues, a more robust system for reading, writing and storing files and metadata will be needed.</p><p id="Par9">This can be achieved by borrowing methods and approaches from computer science. Boa<sub><italic>g</italic></sub> is a language and infrastructure that abstracts away details of parallelization and storage management by providing a domain specific language and simple syntax [<xref ref-type="bibr" rid="CR3">3</xref>]. The main features of Boa<sub><italic>g</italic></sub> are inspired by existing languages for data-intensive computing. These features include robust input/output, querying of data using types/attributes and efficient processing of data using functions and aggregators. Boa<sub><italic>g</italic></sub> can be implemented inside a Docker container or as a Shared Data Science Infrastructure (SDSI). Running on a Hadoop cluster [<xref ref-type="bibr" rid="CR4">4</xref>], it manages the distributed parallelization and collection of data and analyses. Boa<sub><italic>g</italic></sub> can process and query terabytes of raw data. It also has been</p><p id="Par10">shown to substantially reduce programming efforts, thus lowering the barrier of entry to analyze very large data sets and drastically improve scalability and reproducibility [<xref ref-type="bibr" rid="CR4">4</xref>]. Raw data files are described to Boa<sub><italic>g</italic></sub> with attribute types so that all the information contained in the raw data file can be parsed and stored in a binary database. Once complete, the reading, writing, storing and querying the data from these files is straightforward and efficient as it creates a dataset that is uniform regardless of the input file standard (GFF, GFF3, etc). The size of the data in binary format is also smaller.</p><sec id="Sec2"><title>Domain specific languages and Databases in Bioinformatics</title><p id="Par11">Genomics-specific languages are also common in high-throughput sequencing analysis such as S3QL, which aims to provide biological discovery by harnessing Linked Data [<xref ref-type="bibr" rid="CR5">5</xref>]. In addition, there are libraries like BioJava [<xref ref-type="bibr" rid="CR6">6</xref>], Bioperl [<xref ref-type="bibr" rid="CR7">7</xref>], and Biopython [<xref ref-type="bibr" rid="CR8">8</xref>] that provide tools to process biological data.</p><p id="Par12">MongoDB is an open source NoSQL database that also supports many features of traditional databases like sorting, grouping, aggregating, indexing, etc. MongoDB has been used to handle large scale semi-structured or NoSQL data. Datasets are stored in a flexible JSON format and therefore can support data schema that evolves over time. MapReduce [<xref ref-type="bibr" rid="CR9">9</xref>] is a framework that has been used for scalable analysis in scientific data. Hadoop is an open source implementation of MapReduce. In the MapReduce programming model, mappers and reducers are considered as the data processing primitives and and are specified via user-defined functions. A mapper function takes the key-value pairs of input data and provides the key-value pairs as an output or input for the reduce stage, and a reducer function takes these key-values pairs and aggregates data based on the keys and provide the final output. There are organizations that have used the power of MongoDB and Hadoop framework together [<xref ref-type="bibr" rid="CR10">10</xref>] to address challenges in Big Data. Genomics England [<xref ref-type="bibr" rid="CR11">11</xref>] runs the 100,000 Genomes Project [<xref ref-type="bibr" rid="CR12">12</xref>] using MongoDB to harness huge amount of data in bioinformatics. There are also several tools in the field of high-throughput sequencing analysis that use the power of Hadoop and MapReduce programming model. Heavy computation applications like BLAST, GSEA and GRAMMAR have been implemented in Hadoop [<xref ref-type="bibr" rid="CR13">13</xref>]. SARVAVID [<xref ref-type="bibr" rid="CR14">14</xref>] has implemented five well-known applications for running on Haddop: BLAST, MUMmer, E-MEM, SPAdes, and SGA. BLAST [<xref ref-type="bibr" rid="CR15">15</xref>] was also rewritten for Hadoop by Leo <italic>et.al.</italic> [<xref ref-type="bibr" rid="CR16">16</xref>]. In addition to these programs, there are other efforts based on Hadoop to address RNA-Seq and sequence alignment [<xref ref-type="bibr" rid="CR17">17</xref>&#x02013;<xref ref-type="bibr" rid="CR19">19</xref>].</p><p id="Par13">A significant barrier to utilize the Hadoop framework in bioinformatics is the difficulty of the interface and the amount of expertise that are needed to write a MapReduce programs [<xref ref-type="bibr" rid="CR20">20</xref>]. The proposed work tries to abstract away details of these complexities and open a door for more bioinformatics application. Most applications could be called from MapReduce rather than reimplementing them. Unfortunately, there currently does not exist a tool that combines the ability to query databases, with the advantage of a domain specific language and the scalability of Hadoop into a Shared Data Science Infrastructure for large biology datasets. Boa<sub><italic>g</italic></sub>, on the other hand is such a tool but is currently only implemented for mining very large software repositories like GitHub and Sourceforge. It recently has been applied to address potentials and challenges of Big Data in transportation [<xref ref-type="bibr" rid="CR21">21</xref>].</p></sec><sec id="Sec3"><title>Potential for data parallelization framework in biology</title><p id="Par14">There are several very large data repositories in biology that could take advantage of a biology specific implementation of Boa<sub><italic>g</italic></sub><italic>:</italic> The National Center for Biotechnology Information (NCBI), The Cancer Genome Atlas (TCGA), and the Encyclopedia of DNA Elements (ENCODE). NCBI hosts 45 literature/molecular biology databases and is the most popular resource for obtaining raw data for analysis. NCBI and other web resources like Ensembl are data warehouses for storing and querying raw data, sequences, and genes. TCGA contains data that characterizes changes in 33 types of cancer. This repository contains 2.5 petabytes of data and metadata with matched tumor and normal tissues from more than 11,000 patients. The repository is comprised of eight different data types: Whole exome sequence, mRNA sequence, microRNA sequence, DNA copy number profile, DNA methylation profile, whole genome sequencing and reverse-phase protein array expression profile data. ENCODE is a repository with a goal to identify all the functional elements contained in human, mouse, fly and worm. This repository contains more than 600 terabytes (personal communication with @EncodeDCC and @mike_schatz) of data with more than 40 different data types with the most abundant data types being ChIP-Seq, DNase-Seq and RNA-Seq. These databases represent only the tip of the iceberg of potential large data repositories that could benefit from the Boa<sub><italic>g</italic></sub> framework. While it is common to download and analyze small subsets of data (tens of Terabytes for example) from these repositories, analyses on the larger subsets or the entire repository is currently computationally and logistically prohibitive for all but the most well-funded and staffed research groups. While BioMart [<xref ref-type="bibr" rid="CR22">22</xref>], Galaxy, and other web-based infrastructures provide an easy to use tool for users without any knowledge in programming to download subsets of the data, the needs of the advanced users using the entire database aren&#x02019;t met as evidenced by a plethora of bash scripts, R scripts and Python scripts that are widely utilized and reinvented by bioinformaticians. Retrieving the genomics data and performing data-intensive computation can be challenging using existing APIs. Biomartr [<xref ref-type="bibr" rid="CR23">23</xref>] is an R package to retrieve raw genomics data that tries to minimize some of this complexity.</p><p id="Par15">Here we discuss an initial implementation of Boa for genomics on a small test dataset, NCBI Refseq, a database containing data and metadata for 153,848 genome annotation files (GFF). We show the potential of Boa<sub><italic>g</italic></sub> in a comparative context with python and MongoDB by assessing various statistics of the Refseq database and answer the following four questions.
<list list-type="bullet"><list-item><p id="Par16">What is the smallest and largest genome in RefSeq? How has the average number of exons per gene in genomes of a clade changed for genomes deposited before and after 2016?</p></list-item><list-item><p id="Par17">How has the popularity of the top five assembly programs in bacteria changed over time?</p></list-item><list-item><p id="Par18">How has assembly quality changed for genomes deposited before and after 2016?</p></list-item></list></p></sec></sec><sec id="Sec4"><title>Results</title><sec id="Sec5"><title>Summary statistics of RefSeq</title><p id="Par19">While it is straightforward to use the RefSeq website (<ext-link ext-link-type="uri" xlink:href="https://www.ncbi.nlm.nih.gov/refseq/)">https://www.ncbi.nlm.nih.gov/refseq/</ext-link>) to look up this information for your favorite species, it is cumbersome to look up this information for tens to hundreds species. Similarly, while each of these genomes have an annotation file, querying and summarizing information contained in this annotation file from several related genomes such as average number of genes, average number of exons per gene and average gene size requires downloading and organizing the annotation files of interest prior to calculating the statistics.</p><p id="Par20">Data from the RefSeq database was downloaded, a schema was designed and a Hadoop sequence file generated for use with Boa<sub><italic>g</italic></sub>, a domain specific language and shared data infrastructure. The RefSeq data used in this first implementation of Boa<sub><italic>g</italic></sub> contains GFF files and metadata from bacterial (143,907), archaea (814), animal (480), fungal (284) and plant (110) genomes. Each genome has metadata related to the quality of its assembly (Genome size, scaffold count, scaffold N50, contig count, contig N50), the assembler software, and the genic data contained within the GFF annotation file.</p><p id="Par21">Our goal is to implement Boa<sub><italic>g</italic></sub> on a biological dataset to demonstrate a means to explore large datasets. In the following subsections, we will answer the four questions posed in the introduction and explore Boa<sub><italic>g</italic></sub> efficiency in storage, speed, and coding complexity.</p></sec><sec id="Sec6"><title>What is the largest and smallest genome in RefSeq?</title><p id="Par22">As of February 16th, 2019, the largest genome in the RefSeq database was <italic>Orycteropus afer afer</italic> (aardvark, GCF_000298275.1) at a length of 4,444,080,527 bp. The smallest genome is RYMV, a small circular viroid-like RNA hammerhead ribozymein sequenced from Rice and annotated as a Rice yellow mottle virus satellite (viruses). Its complete genome has a length of 220 bases and has a RefSeq id GCF_000839085.1.</p><p id="Par23">With the full RefSeq dataset in a Hadoop sequence file, this statistic only required seven lines of Boa<sub><italic>g</italic></sub> code (Fig. <xref rid="Fig1" ref-type="fig">1</xref>). In line one, variable g is defined as a Genome which is a top-level type in our language. MaxGenome and MinGenome are output aggregators that produce the maximum and minimum genome length respectively. Lines five and seven in the code emit the assembly total length to the reducer for all the genomes in the dataset, then the reducer will identify the largest and smallest genomes. It took Boa<sub><italic>g</italic></sub> approximately 30 seconds to finish this query when using a single node without Hadoop. It took the equivalent query using python approximately one hour using a single core.
<fig id="Fig1"><label>Fig. 1</label><caption><p>Code to find the smallest and largest genomes in RefSeq</p></caption><graphic xlink:href="12859_2019_2967_Fig1_HTML" id="MO1"/></fig></p><sec id="Sec7"><title>How has the average number of exons per gene in a species clade changed for genomes deposited before and after 2016?</title><p id="Par24">Due to the rapid advancement of sequencing technologies and genome assembly/annotation programs, any meaningful biological changes in gene and exon frequency will be confounded with these advancements. We explored seven clades: five kingdoms and two phyla to explore how exon number, gene number, gene length and exons per gene have changed before and after 2016. These branches of the tree of life included Bacteria, Archaea, Fungi, Ascomycota (a fungal phylum), Viriplantae (plants), Eudicotyledons (a clade in flowering plants) and Metazoans (a clade of animals). In the last two years, the number of sequenced bacterial genomes has nearly quadrupled, while all other clades have seen at least a 50% increase in RefSeq database (Tables <xref rid="Tab1" ref-type="table">1</xref> and <xref rid="Tab2" ref-type="table">2</xref>). The number of genes, number of exons and exons per gene have increased for all clades database (Tables <xref rid="Tab1" ref-type="table">1</xref> and <xref rid="Tab2" ref-type="table">2</xref>). Since prokaryotes do not have exons, Bacteria and Archaea were excluded from this query for exon number and exon per gene (NA). A higher number of exons per gene for the Eukaryotes suggests that gene models are improving and becoming less fragmented. This improvement could be due to improvements in gene annotation software or assembly contiguity.
<table-wrap id="Tab1"><label>Table 1</label><caption><p>Exon Statistics for years &#x0003e;&#x02009;=&#x02009;2016</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Name</th><th>Total species</th><th>Exon number</th><th>Gene number</th><th>Gene Length</th><th>Exon per Gene</th></tr></thead><tbody><tr><td>Bacteria</td><td>92,287</td><td>N/A</td><td>4<italic>.</italic>3&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>5&#x02009;<italic>k</italic></td><td>890&#x000a0;<italic>&#x000b1;</italic>&#x000a0;64</td><td>N/A</td></tr><tr><td>Fungi</td><td>90</td><td>32<italic>.</italic>3&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>8&#x02009;<italic>k</italic></td><td>10&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;3<italic>.</italic>5&#x02009;<italic>k</italic></td><td>1<italic>.</italic>6&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;171</td><td>2<italic>.</italic>9&#x000a0;<italic>&#x000b1;</italic>&#x000a0;1<italic>.</italic>3</td></tr><tr><td>Archaea</td><td>338</td><td>N/A</td><td>2<italic>.</italic>9&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>9&#x02009;<italic>k</italic></td><td>851&#x000a0;<italic>&#x000b1;</italic>&#x000a0;31</td><td>N/A</td></tr><tr><td>Viridiplantae</td><td>46</td><td>385&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;155&#x02009;<italic>k</italic></td><td>43&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;21&#x02009;<italic>k</italic></td><td>4<italic>.</italic>1&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>3&#x02009;<italic>k</italic></td><td>9<italic>.</italic>2&#x000a0;<italic>&#x000b1;</italic>&#x000a0;1<italic>.</italic>9</td></tr><tr><td>Metazoas</td><td>185</td><td>462&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;280&#x02009;<italic>k</italic></td><td>24<italic>.</italic>9&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;10<italic>.</italic>3&#x02009;<italic>k</italic></td><td>23&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;11<italic>.</italic>8&#x02009;<italic>k</italic></td><td>17<italic>.</italic>7&#x000a0;<italic>&#x000b1;</italic>&#x000a0;6<italic>.</italic>4</td></tr><tr><td>Ascomycota</td><td>70</td><td>28<italic>.</italic>4&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;13<italic>.</italic>7&#x02009;<italic>k</italic></td><td>10<italic>.</italic>4&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;3<italic>.</italic>1&#x02009;<italic>k</italic></td><td>1<italic>.</italic>6&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;142</td><td>2<italic>.</italic>5&#x000a0;<italic>&#x000b1;</italic>&#x000a0;0<italic>.</italic>8</td></tr><tr><td>eudicotyledons (dicots)</td><td>37</td><td>397&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;167&#x02009;<italic>k</italic></td><td>45&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;22&#x02009;<italic>k</italic></td><td>3<italic>.</italic>8&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;688</td><td>9&#x000a0;<italic>&#x000b1;</italic>&#x000a0;1<italic>.</italic>3</td></tr></tbody></table></table-wrap>
<table-wrap id="Tab2"><label>Table 2</label><caption><p>Exon Statistics for years &#x0003c;&#x02009;2016</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Name</th><th>Total species</th><th>Exon number</th><th>Gene number</th><th>Gene Length</th><th>Exon per Gene</th></tr></thead><tbody><tr><td>Bacteria</td><td>51,537</td><td>N/A</td><td>3<italic>.</italic>8&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>5&#x02009;<italic>k</italic></td><td>885&#x000a0;<italic>&#x000b1;</italic>&#x000a0;65</td><td>N/A</td></tr><tr><td>Fungi</td><td>194</td><td>29&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;20&#x02009;<italic>k</italic></td><td>9<italic>.</italic>2&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;3<italic>.</italic>5&#x02009;<italic>k</italic></td><td>1<italic>.</italic>6&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;254</td><td>2<italic>.</italic>8&#x000a0;<italic>&#x000b1;</italic>&#x000a0;1<italic>.</italic>5</td></tr><tr><td>Archaea</td><td>474</td><td>
<italic>N/A</italic>
</td><td>2<italic>.</italic>9&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>8&#x02009;<italic>k</italic></td><td>855&#x000a0;<italic>&#x000b1;</italic>&#x000a0;40</td><td>N/A</td></tr><tr><td>Viridiplantae</td><td>61</td><td>273&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;153&#x02009;<italic>k</italic></td><td>32&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;17&#x02009;<italic>k</italic></td><td>4<italic>.</italic>1&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;2<italic>.</italic>3&#x02009;<italic>k</italic></td><td>8&#x000a0;<italic>&#x000b1;</italic>&#x000a0;2<italic>.</italic>5</td></tr><tr><td>Metazoas</td><td>262</td><td>314&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;211&#x02009;<italic>k</italic></td><td>22<italic>.</italic>3&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;9<italic>.</italic>6&#x02009;<italic>k</italic></td><td>22&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;12&#x02009;<italic>k</italic></td><td>13<italic>.</italic>4&#x000a0;<italic>&#x000b1;</italic>&#x000a0;5<italic>.</italic>4</td></tr><tr><td>Ascomycota</td><td>143</td><td>25<italic>.</italic>2&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;14<italic>.</italic>3&#x02009;<italic>k</italic></td><td>9<italic>.</italic>5&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;3<italic>.</italic>1&#x02009;<italic>k</italic></td><td>1<italic>.</italic>6&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;205</td><td>2<italic>.</italic>4&#x000a0;<italic>&#x000b1;</italic>&#x000a0;1</td></tr><tr><td>eudicotyledons (dicots)</td><td>41</td><td>328&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;133&#x02009;<italic>k</italic></td><td>38&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;16&#x02009;<italic>k</italic></td><td>4&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>4&#x02009;<italic>k</italic></td><td>8<italic>.</italic>6&#x000a0;<italic>&#x000b1;</italic>&#x000a0;1<italic>.</italic>3</td></tr></tbody></table></table-wrap></p><p id="Par25">We find fewer genes in archaea than in bacteria, at 2.9k and 4.3k genes respectively. The highest gene numbers in eukaryotes are plants (43k), with animals and fungi being having fewer genes at 24.9k and 10k, respectively [<xref ref-type="bibr" rid="CR24">24</xref>]. However, the mean gene length for these clades has not changed between timepoints, indicating that the increased exon content per gene is likely due to an improvement in annotation software.</p><p id="Par26">This query required 15 lines of Boa<sub><italic>g</italic></sub> code (Fig. <xref rid="Fig2" ref-type="fig">2</xref>) using a five node shared Hadoop cluster on Bridges with 64 mappers approximately 42 minutes to answer this question. It took the equivalent query using 45 lines of python code approximately 20 hours using a single core.
<fig id="Fig2"><label>Fig. 2</label><caption><p>Number of exons, genes, and exons per gene after 2016. The output is shown in Table&#x000a0;<xref rid="Tab1" ref-type="table">1</xref></p></caption><graphic xlink:href="12859_2019_2967_Fig2_HTML" id="MO2"/></fig></p></sec></sec><sec id="Sec8"><title>How has the popularity of bacterial genome assembly programs changed?</title><p id="Par27">The choice of genome assembly program to assemble a genome depends on many factors including but not limited to user familiarity of the program in the domain, ease of use, assembly quality, turnaround time. Looking at the number of genomes assembled by the top five most popular assemblers in bacteria indicate that more genomes are being assembled over time, that there was a brief period of popularity with AllPaths in 2014, and a rapid rise in popularity of the SPAdes assembler in the last couple of years. CLC workbench offers a GUI interface to users without programming experience, and has consistently maintained a slice of the user market (Fig. <xref rid="Fig3" ref-type="fig">3</xref>).
<fig id="Fig3"><label>Fig. 3</label><caption><p>Bacterial assembly programs popularity over time. The output of this script is shown in Fig.&#x000a0;<xref rid="Fig4" ref-type="fig">4</xref></p></caption><graphic xlink:href="12859_2019_2967_Fig3_HTML" id="MO3"/></fig></p><p id="Par28">This query required six lines of Boa<sub><italic>g</italic></sub> code Fig. <xref rid="Fig4" ref-type="fig">4</xref> using a five node Hadoop cluster with 32 mappers approximately 30 seconds to answer this question. The equivalent single-cored python query took approximately one hour with 35 lines of code.
<fig id="Fig4"><label>Fig. 4</label><caption><p>Assembler programs for Bacteria over the years</p></caption><graphic xlink:href="12859_2019_2967_Fig4_HTML" id="MO4"/></fig></p></sec><sec id="Sec9"><title>How has metazoan assembly quality changed for genomes deposited before and after 2016?</title><p id="Par29">To minimize bias in organismal variation and assembly software, we have limited our comparison to metazoans and the top three assembly programs. The popular assembly programs for metazoans has been AllPaths after 2016 while SOAPdenovo was the most popular one before 2016. A high-quality assembly is characterized by a low scaffold count and high N50, stats that dramatically improved at the 2016 transition. As it can be seen in Tables <xref rid="Tab3" ref-type="table">3</xref> and <xref rid="Tab4" ref-type="table">4</xref>, the scaffold count has decreased for all three assemblers after 2016 while the contig N50 metric has increased. This is not a surprise, as assembly algorithms are expected to improve over time. Newbler had a dramatic decrease in scaffold count after 2016. The highest average N50 among metazoans belongs to AllPaths.
<table-wrap id="Tab3"><label>Table 3</label><caption><p>List of top three most used assembly programs for Metazoa (Year &#x0003e; =2016)</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Kingdom</th><th>Program Name</th><th>species</th><th>Total length</th><th>Scaffold-count</th><th>ScaffoldN50</th><th>ContigCount</th><th>ContigN50</th></tr></thead><tbody><tr><td>Metazoa</td><td>SOAPdenovo</td><td>21</td><td>1B&#x02009;&#x000b1;&#x02009;0.8B</td><td>38&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;49&#x02009;<italic>k</italic></td><td>7.8&#x02009;M&#x02009;&#x000b1;&#x02009;11&#x02009;M</td><td>86&#x02009;k&#x02009;&#x000b1;&#x02009;66&#x02009;k</td><td>98&#x02009;k&#x02009;&#x000b1;&#x02009;208&#x02009;k</td></tr><tr><td/><td>AllPaths</td><td>48</td><td>0.9B&#x02009;&#x000b1;&#x02009;0.7B</td><td>7.1&#x02009;k&#x02009;&#x000b1;&#x02009;7&#x02009;k</td><td>4.3&#x02009;M&#x02009;&#x000b1;&#x02009;1.4&#x02009;M</td><td>33&#x02009;k&#x02009;&#x000b1;&#x02009;38&#x02009;k</td><td>188&#x02009;k&#x02009;&#x000b1;&#x02009;335&#x02009;k</td></tr><tr><td/><td>Newbler</td><td>7</td><td>0.8B&#x02009;&#x000b1;&#x02009;0.9B</td><td>3.3&#x02009;k&#x02009;&#x000b1;&#x02009;2.2&#x02009;k</td><td>877&#x02009;k&#x02009;&#x000b1;&#x02009;910&#x02009;k</td><td>56&#x02009;k&#x02009;&#x000b1;&#x02009;80&#x02009;k</td><td>75&#x02009;k&#x02009;&#x000b1;&#x02009;60&#x02009;k</td></tr></tbody></table></table-wrap>
<table-wrap id="Tab4"><label>Table 4</label><caption><p>List of top three most used assembly programs for Metazoa (Year &#x0003c;&#x02009;2016)</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Kingdom</th><th>Program Name</th><th>species</th><th>Total length</th><th>Scaffold-count</th><th>ScaffoldN50</th><th>ContigCount</th><th>ContigN50</th></tr></thead><tbody><tr><td>Metazoa</td><td>SOAPdenovo</td><td>98</td><td>1<italic>.</italic>2<italic>B&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>7<italic>B</italic></td><td>40&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;38&#x02009;<italic>k</italic></td><td>4<italic>.</italic>5&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;13&#x02009;<italic>M</italic></td><td>116&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;79&#x02009;<italic>k</italic></td><td>42&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;48&#x02009;<italic>k</italic></td></tr><tr><td/><td>AllPaths</td><td>54</td><td>1<italic>.</italic>5<italic>B&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>1<italic>B</italic></td><td>11&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;13&#x02009;<italic>k</italic></td><td>7<italic>.</italic>4&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;9<italic>.</italic>7&#x02009;<italic>M</italic></td><td>119&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;97&#x02009;<italic>k</italic></td><td>38&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;32&#x02009;<italic>k</italic></td></tr><tr><td/><td>Newbler</td><td>18</td><td>0<italic>.</italic>9<italic>B&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>9<italic>B</italic></td><td>87&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;117&#x02009;<italic>k</italic></td><td>2<italic>.</italic>1&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;2<italic>.</italic>3&#x02009;<italic>M</italic></td><td>133&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;157&#x02009;<italic>k</italic></td><td>34&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;27&#x02009;<italic>k</italic></td></tr></tbody></table></table-wrap></p><p id="Par30">This query required 10 lines of Boa<sub><italic>g</italic></sub> code using five nodes Hadoop cluster with 32 mappers approximately 30 seconds. An equivalent single-cored Python query took approximately one hour and 32 lines of code (Fig. <xref rid="Fig5" ref-type="fig">5</xref>).
<fig id="Fig5"><label>Fig. 5</label><caption><p>Assembly statistics for genomes for years after 2016. The output is shown in Table&#x000a0;<xref rid="Tab5" ref-type="table">5</xref></p></caption><graphic xlink:href="12859_2019_2967_Fig5_HTML" id="MO5"/></fig></p></sec></sec><sec id="Sec10"><title>Discussions</title><sec id="Sec11"><title>Database storage efficiency and computational efficiency with Hadoop</title><p id="Par31">One benefit of the Boa<sub><italic>g</italic></sub> database is the significant reduction in required storage of the raw data. The downloaded NCBI RefSeq data was 379GB, but reduced to 64GB (6.2 fold reduction) in the Boa<sub><italic>g</italic></sub> database. This data size reduction is due to the binary format of Hadoop Sequence file which makes disk writing faster than a text file (Fig. <xref rid="Fig6" ref-type="fig">6</xref>). A fungi-only subset of the RefSeq data was dramatically reduced from 5.4GB to 0.5 GB (10 fold reduction). This variability in size reduction is presumably due to variability in the number and size of files among phyla.
<fig id="Fig6"><label>Fig. 6</label><caption><p>The Boa<sub><italic>g</italic></sub> database size comparison with the raw data in the RefSeq as well as the JSON version of the dataset</p></caption><graphic xlink:href="12859_2019_2967_Fig6_HTML" id="MO6"/></fig></p><p id="Par32">A second benefit of Boa<sub><italic>g</italic></sub> is its ability to take advantage of parallelization and distribution during computation. Increasing the number of Hadoop mappers for a Boa<sub><italic>g</italic></sub> job decreases the query turnaround time. Taking the four queries we posed in the introduction, we varied the level of Hadoop mappers to show the speedup that results by adding additional Hadoop mappers to an analysis. Figure <xref rid="Fig7" ref-type="fig">7</xref>, demonstrates the exponential decrease in required computation time with a corresponding increase in the number of Hadoop mappers. As you can see, if the number of mappers are not optimized for the amount of computational infrastructure than the second query takes approximately 350 minutes on 2 mappers to complete. However, as more mappers are added, the time required levels out to less than one minutes on assembly related queries. This lower bound of this relationship is presumably due to the overhead of splitting and gathering of data across the mappers. As we add more mappers the running time decreases for example with 256 mappers runtime is 22 minutes on the entire RefSeq. It is not difficult to see the benefit of using a domain specific language like Boa<sub><italic>g</italic></sub> and Hadoop infrastructure to query much larger biological datasets than RefSeq (Fig. <xref rid="Fig8" ref-type="fig">8</xref>).
<fig id="Fig7"><label>Fig. 7</label><caption><p>Scalability of Boa<sub><italic>g</italic></sub> programs (time is in Log base 2 (sec)). Queries 1,2,3 and 4 are the four questions investigated here</p></caption><graphic xlink:href="12859_2019_2967_Fig7_HTML" id="MO7"/></fig>
<fig id="Fig8"><label>Fig. 8</label><caption><p>Boa<sub><italic>g</italic></sub> Architecture and Data Generation</p></caption><graphic xlink:href="12859_2019_2967_Fig8_HTML" id="MO8"/></fig></p><p id="Par33">Taking advantages of Hadoop based infrastructure, all the queries in the Tables <xref rid="Tab5" ref-type="table">5</xref> and <xref rid="Tab6" ref-type="table">6</xref> that describe the genome assembly statistics before and after 2016 transition required less than a minute.
<table-wrap id="Tab5"><label>Table 5</label><caption><p>Kingdoms and average summary statistics for their genome assemblies (Years &#x0003e; =2016)</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Tax ID</th><th>Name</th><th>Species</th><th>Total length</th><th>Scaffold-count</th><th>ScaffoldN50</th><th>ContigCount</th><th>ContigN50</th></tr></thead><tbody><tr><td>2</td><td>Bacteria</td><td>92,290</td><td>4<italic>.</italic>3&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>6&#x02009;<italic>M</italic></td><td>66&#x000a0;<italic>&#x000b1;</italic>&#x000a0;78</td><td>0<italic>.</italic>9&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>4&#x02009;<italic>M</italic></td><td>132&#x000a0;<italic>&#x000b1;</italic>&#x000a0;176</td><td>0<italic>.</italic>39&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>86&#x02009;<italic>M</italic></td></tr><tr><td>4751</td><td>Fungi</td><td>90</td><td>29&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;15&#x02009;<italic>M</italic></td><td>139&#x000a0;<italic>&#x000b1;</italic>&#x000a0;159</td><td>1<italic>.</italic>3&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>9&#x02009;<italic>M</italic></td><td>360&#x000a0;<italic>&#x000b1;</italic>&#x000a0;688</td><td>0<italic>.</italic>78&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1&#x02009;<italic>M</italic></td></tr><tr><td>2157</td><td>Archaea</td><td>338</td><td>2<italic>.</italic>9&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>98&#x02009;<italic>M</italic></td><td>52&#x000a0;<italic>&#x000b1;</italic>&#x000a0;40</td><td>0<italic>.</italic>38&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>43&#x02009;<italic>M</italic></td><td>74&#x000a0;<italic>&#x000b1;</italic>&#x000a0;121</td><td>0<italic>.</italic>53&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;71&#x02009;<italic>M</italic></td></tr><tr><td>33,090</td><td>Viridiplantae</td><td>46</td><td>0<italic>.</italic>97<italic>B&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>88<italic>B</italic></td><td>9<italic>.</italic>1&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;18<italic>.</italic>3&#x02009;<italic>k</italic></td><td>31&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;49&#x02009;<italic>M</italic></td><td>38&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;43&#x02009;<italic>k</italic></td><td>1<italic>.</italic>8&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;4<italic>.</italic>9&#x02009;<italic>M</italic></td></tr><tr><td>33,208</td><td>Metazoas</td><td>185</td><td>1<italic>.</italic>2<italic>B&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>95<italic>B</italic></td><td>20<italic>.</italic>6&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;43<italic>.</italic>7&#x02009;<italic>k</italic></td><td>22&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;36&#x02009;<italic>M</italic></td><td>53&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;77&#x02009;<italic>k</italic></td><td>2<italic>.</italic>5&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;7<italic>.</italic>9&#x02009;<italic>M</italic></td></tr><tr><td>71,240</td><td>eudicotyledons (dicots)</td><td>37</td><td>0<italic>.</italic>91<italic>B&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>76<italic>B</italic></td><td>6<italic>.</italic>4&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;10<italic>.</italic>6&#x02009;<italic>k</italic></td><td>26&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;50&#x02009;<italic>M</italic></td><td>40&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;44&#x02009;<italic>k</italic></td><td>1<italic>.</italic>6&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;4<italic>.</italic>3&#x02009;<italic>M</italic></td></tr></tbody></table></table-wrap>
<table-wrap id="Tab6"><label>Table 6</label><caption><p>Kingdoms and average summary statistics for their genome assemblies (Years &#x0003c;= 2015)</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Tax ID</th><th>Name</th><th>Species</th><th>Total length</th><th>Scaffold Count</th><th>ScaffoldN50</th><th>ContigCount</th><th>ContigN50</th></tr></thead><tbody><tr><td>2</td><td>Bacteria</td><td>51,962</td><td>3<italic>.</italic>8&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>6&#x02009;<italic>M</italic></td><td>45&#x000a0;<italic>&#x000b1;</italic>&#x000a0;82</td><td>1<italic>.</italic>3&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>5&#x02009;<italic>M</italic></td><td>126&#x000a0;<italic>&#x000b1;</italic>&#x000a0;177</td><td>0<italic>.</italic>27&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>55&#x02009;<italic>M</italic></td></tr><tr><td>4751</td><td>Fungi</td><td>202</td><td>2<italic>.</italic>9&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;17&#x02009;<italic>M</italic></td><td>341&#x000a0;<italic>&#x000b1;</italic>&#x000a0;699</td><td>2&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>7&#x02009;<italic>M</italic></td><td>858&#x000a0;<italic>&#x000b1;</italic>&#x000a0;1433</td><td>0<italic>.</italic>55&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>75&#x02009;<italic>M</italic></td></tr><tr><td>2157</td><td>Archaea</td><td>470</td><td>29&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1&#x02009;<italic>M</italic></td><td>17&#x000a0;<italic>&#x000b1;</italic>&#x000a0;16</td><td>1<italic>.</italic>35&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>17&#x02009;<italic>M</italic></td><td>110&#x000a0;<italic>&#x000b1;</italic>&#x000a0;126</td><td>0<italic>.</italic>38&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>7&#x02009;<italic>M</italic></td></tr><tr><td>33,090</td><td>Viridiplantae</td><td>67</td><td>0<italic>.</italic>62<italic>B&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>68<italic>B</italic></td><td>22<italic>.</italic>9&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;46<italic>.</italic>6&#x02009;<italic>k</italic></td><td>14<italic>.</italic>7&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;24<italic>.</italic>9&#x02009;<italic>M</italic></td><td>52<italic>.</italic>5&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;71<italic>.</italic>6&#x02009;<italic>k</italic></td><td>0<italic>.</italic>47&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>8&#x02009;<italic>M</italic></td></tr><tr><td>33,208</td><td>Metazoas</td><td>295</td><td>1<italic>.</italic>3<italic>B&#x02009;&#x000b1;</italic>&#x000a0;1<italic>B</italic></td><td>37<italic>.</italic>4&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;64<italic>.</italic>2&#x02009;<italic>k</italic></td><td>7<italic>.</italic>2&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;14&#x02009;<italic>M</italic></td><td>118<italic>.</italic>6&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;119&#x02009;<italic>k</italic></td><td>0<italic>.</italic>13&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>2&#x02009;<italic>M</italic></td></tr><tr><td>71,240</td><td>eudicotyledons (dicots)</td><td>46</td><td>0<italic>.</italic>754<italic>B&#x02009;&#x000b1;</italic>&#x000a0;0<italic>.</italic>750<italic>B</italic></td><td>26<italic>.</italic>3&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;53<italic>.</italic>5&#x02009;<italic>k</italic></td><td>17&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;27&#x02009;<italic>M</italic></td><td>58<italic>.</italic>8&#x02009;<italic>k&#x02009;&#x000b1;</italic>&#x000a0;74&#x02009;<italic>k</italic></td><td>0<italic>.</italic>3&#x02009;<italic>M&#x02009;&#x000b1;</italic>&#x000a0;1<italic>.</italic>6&#x02009;<italic>M</italic></td></tr></tbody></table></table-wrap></p></sec><sec id="Sec12"><title>Comparison between MongoDB and Boa<sub><italic>g</italic></sub></title><p id="Par34">An analysis in Boa<sub><italic>g</italic></sub> requires fewer lines of codes than other languages available like MongoDB and Python (Fig. <xref rid="Fig9" ref-type="fig">9</xref>). The file size in the Boa<sub><italic>g</italic></sub> database is much smaller than the JSON file used in MongoDB, as Boa<sub><italic>g</italic></sub> utilizes a binary format. Since the data schema in MongoDB also needs to be saved along with the data, the output files are larger and take longer to write (Fig. <xref rid="Fig6" ref-type="fig">6</xref>). The JSON file size is larger and on average it is more than double size of the RefSeq raw data. While experts in MongoDB may write this query more efficiently, the Boa<sub><italic>g</italic></sub> language requires fewer lines of code (Fig. <xref rid="Fig9" ref-type="fig">9</xref>), thereby providing an easier interface for bioinformaticians to explore big data.
<fig id="Fig9"><label>Fig. 9</label><caption><p>Comparison of the code needed to query the number of assembler programs per taxon id run on Refseq Data. On the left side, the MongoDB code needs eight lines of code in Python whereas the BoaG script needs only three lines of code. <bold>a</bold>. MongoDB query to calculate number of assembler programs per taxon id. <bold>b</bold>. Equivalent Boag query needs fewer lines of code</p></caption><graphic xlink:href="12859_2019_2967_Fig9_HTML" id="MO9"/></fig></p><p id="Par35">The performance of MongoDB and Hadoop has been previously compared [<xref ref-type="bibr" rid="CR25">25</xref>], showing that the read-write overhead of Hadoop has a lower read-write overhead (Table <xref rid="Tab7" ref-type="table">7</xref>).
<table-wrap id="Tab7"><label>Table 7</label><caption><p>Comparison between MongoDB and BoaG</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Feature</th><th>MongoDB</th><th>BoaG</th></tr></thead><tbody><tr><td>Lines of Code</td><td>larger</td><td>smaller because it abstracts details of data analysis</td></tr><tr><td>Data generation time</td><td>longer due to the larger file</td><td>faster because of Binary file</td></tr><tr><td>Data file</td><td>JSON is 2.7 times larger than raw data</td><td>Hadoop Sequence file&#x000a0;5 times smaller than raw data</td></tr><tr><td>Schema Flexibility</td><td>Yes. Supports semi-structured data</td><td>Yes. Schema and compiler can be modified</td></tr><tr><td>MapReduce</td><td>Yes</td><td>Yes</td></tr></tbody></table></table-wrap></p></sec><sec id="Sec13"><title>Comparison between Python and Boa<sub><italic>g</italic></sub></title><p id="Par36">A general-purpose language like Python could also be utilized to execute the same queries investigated here. However, the Python code would be larger and require learning how to use Python libraries. To illustrate, we wrote an example program in Python to calculate the top three most used assembly programs required only five lines of code in Boa<sub><italic>g</italic></sub> language. In Python, a similar analysis required 38 lines of code (Fig. <xref rid="Fig10" ref-type="fig">10</xref>). Because Python needs to aggregate the output data, it needs more lines of code and a longer runtime. This advantage inherent to domain-specific languages will speed up a researcher&#x02019;s ability to query large datasets.
<fig id="Fig10"><label>Fig. 10</label><caption><p>Comparison of Line of Code (LOC) and performance to answer query &#x0201c; What are the top three most used assembly programs?&#x0201d; run on Refseq Data. On the left side, the equivalent Boa<sub>g</sub> code needs 38 lines of code in Python whereas the Boa<sub>g</sub> script needs only five</p></caption><graphic xlink:href="12859_2019_2967_Fig10_HTML" id="MO10"/></fig></p><p id="Par37">More comparisons in terms of runtime and lines of codes are given in Fig. <xref rid="Fig11" ref-type="fig">11</xref>. These tests were performed on an iMac system with processor 4 GHz Intel Core i7 and 32 GB 1867 MHz DDR3 of memory.
<fig id="Fig11"><label>Fig. 11</label><caption><p>Example of Boa<sub>g</sub> programs to compute different tasks on the full RefSeq dataset. The python programs were running on the single core. The Hadoop infrastructure on Bridges has 5 shared nodes with 32 mappers. While these queries can be written in parallel in python, this needs more lines of code and more programming skills to write a parallel code</p></caption><graphic xlink:href="12859_2019_2967_Fig11_HTML" id="MO11"/></fig></p><p id="Par38">Boa<sub><italic>g</italic></sub> also provides an external implementation that allows users to bring their own implementation from Python, Perl, Bash, etc. Not all users of the infrastructure can run any arbitrary scripts on the infrastructure. Scripts need to be converted to a DSL function so that they will not cause security issues for the infrastructure.</p></sec></sec><sec id="Sec14"><title>Conclusion</title><p id="Par39">In this work, we presented Boa<sub><italic>g</italic></sub> which is a domain-specific language and shared data science infrastructure that takes advantage of Hadoop distribution for large-scale computations. Boa<sub><italic>g</italic></sub> &#x02018;s infrastructure opens the exploration of large datasets in ways that were previously not possible without deep expertise in data acquisition, data storage, data retrieval, data mining, and parallelization. The RefSeq database was used as an example dataset from Biology to show how to implement the domain-specific language Boa<sub><italic>g</italic></sub> for biological discovery. Boa<sub><italic>g</italic></sub> is able to query the RefSeq dataset in under 2 minutes for most queries, offering a substantial time savings from other methods. Many examples, tutorials, and a Docker container are available a GitHub repository. This paper provides a proof of concept behind the Boa<sub><italic>g</italic></sub> infrastructure and its ability to scale to much larger datasets. This is the first step towards providing a shared data science infrastructure to explore large biological datasets.</p><p id="Par40">In future, we will integrate new data types including the Non-Redundant protein database, biological ontologies, SRA, etc. We will also update the Boa<sub><italic>g</italic></sub> database and provide a publicly available web-interface for researchers to run query on our infrastructure.</p></sec><sec id="Sec15"><title>Methods</title><sec id="Sec16"><title>Choice of Biological repository for prototype implementation</title><p id="Par41">RefSeq is a relatively small dataset containing information on well-annotated sequences spanning the tree of life: plants, animals, fungi, archaea and bacteria. The smaller database size permits rapid iterations of Boa<sub><italic>g</italic></sub> applied to biology, and illustrates the benefits of a genomics specific language. RefSeq also has a decent amount of metadata about genome assemblies and their annotations for which as far as we know has not been explored as a whole. Unfortunately, due to the rapid advancement of sequencing technologies and genome assembly/annotation programs, deriving biologically meaningful information from comparisons of assembly stats across the entire dataset is not possible. However, as a demonstration of the usefulness of a Boa<sub><italic>g</italic></sub> infrastructure, we show how straightforward it is to ask questions about how the database and the metadata has changed over time which gives insight into how improvements in sequencing technology and assembly/annotation programs have affected the data contained in this repository. These types of information would be challenging to procure directly from the online repository.</p></sec><sec id="Sec17"><title>Design and implementation considerations</title><p id="Par42">As a domain specific language careful consideration must be taken in its design for Hadoop based infrastructure implementation for RefSeq data. The overall workflow for Boa<sub><italic>g</italic></sub> requires a program written in Boa<sub><italic>g</italic></sub> that is submitted to the Boa<sub><italic>g</italic></sub> infrastructure (Fig. <xref rid="Fig8" ref-type="fig">8</xref> (a)). The infrastructure takes the submitted program and compiles with the Boa<sub><italic>g</italic></sub> compiler and executes the program on a distributed Hadoop cluster using a Boa<sub><italic>g</italic></sub> formatted database of the raw data. Boa<sub><italic>g</italic></sub> has aggregators, which are functions that run on the entire or a large subset of the database to take advantage of the Boa<sub><italic>g</italic></sub>&#x02019;s database, which is designed to distribute both data and compute across a Hadoop cluster.</p></sec><sec id="Sec18"><title>A Boa<sub><italic>g</italic></sub> infrastructure provides the following benefits for exploring large datasets</title><p id="Par43">
<list list-type="bullet"><list-item><p id="Par44">A computational framework on top of Hadoop that can query large dataset in minutes.</p></list-item><list-item><p id="Par45">An efficient data schema that provides storage efficiency and parallelization.</p></list-item><list-item><p id="Par46">An expandable database integration.</p></list-item><list-item><p id="Par47">A domain-specific language that can be incorporated in a container, Galaxy framework or along with any language like R or Python in a Juypter notebook.</p></list-item></list>
</p><sec id="Sec19"><title>Genomics-specific Language and data schema</title><p id="Par48">To create the domain-specific language for biology in Boa<sub><italic>g</italic></sub>, we created domain types, attributes and functions for the RefSeq dataset that includes the following raw file types: FASTA, GFF and associated metadata, as shown in Table <xref rid="Tab8" ref-type="table">8</xref>, Genome, Sequence, Feature, and Assembler are types in Boa<sub><italic>g</italic></sub> language and taxid, refseq, etc are attributes of the genome type. We created the data schema based on the Google protocol buffer, which is an efficient data representation of genomic data that provides both storage efficiency and efficient computation for Boa<sub><italic>g</italic></sub>.
<table-wrap id="Tab8"><label>Table 8</label><caption><p>Domain types for Genomics data in BoaG</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Type</th><th>Attributes</th><th>Details</th></tr></thead><tbody><tr><td rowspan="5">Genome</td><td>taxid</td><td>Taxonomy ID of each species</td></tr><tr><td>refseq</td><td>Refseq ID of the GFF file</td></tr><tr><td>Sequence</td><td>List of sequence reads in each GFF file [<xref ref-type="bibr" rid="CR26">26</xref>].</td></tr><tr><td>AssemblerRoot</td><td>List of assembly programs associated with this genome</td></tr><tr><td>accession</td><td>Accession number</td></tr><tr><td rowspan="3">Sequence</td><td>header</td><td>Header of Sequence</td></tr><tr><td>FeatureRoot</td><td>List of features including exon,gene,mRNA, and CDS associated with this sequence</td></tr><tr><td>seq</td><td>Actual DNA sequences from FASTA files</td></tr><tr><td rowspan="2">FeatureRoot</td><td>refseq</td><td>This field shows the key ID</td></tr><tr><td>feature</td><td>This field is the list of features associated with this ID</td></tr><tr><td rowspan="11">Feature</td><td>accession</td><td>Accession code of the Sequence</td></tr><tr><td>seqid</td><td>Sequence ID</td></tr><tr><td>source</td><td>A text qualifier that describes the algorithm or procedure that generated this feature.</td></tr><tr><td>ftype</td><td>Type of the feature</td></tr><tr><td>start</td><td>starting point of the feature</td></tr><tr><td>end</td><td>End point of the feature</td></tr><tr><td>score</td><td>Score of the feature. This is a floating point number.</td></tr><tr><td>strand</td><td>+ and - for positive and negative strand respectively</td></tr><tr><td>phase</td><td>Phase of the feature. The phase is one of the integers 0, 1, or 2</td></tr><tr><td>Attribute</td><td>List of attributes for each feature</td></tr><tr><td>parent</td><td>Shows the parent of the attribute</td></tr><tr><td rowspan="3">Attribute</td><td>id</td><td>Attribute ID</td></tr><tr><td>tag</td><td>Attribute tag including gbkey etc.</td></tr><tr><td>value</td><td>Value of the tag</td></tr><tr><td rowspan="7">AssemblerRoot</td><td>Assembler</td><td>List of assembly programs</td></tr><tr><td>total-length</td><td>Total length or genome size (base pair)</td></tr><tr><td>total-gap-length</td><td>Total gap length after genome assembly</td></tr><tr><td>scaffold-N50</td><td>Scaffold N50 metric</td></tr><tr><td>scaffold-count</td><td>Scaffold count metric</td></tr><tr><td>contig-N50</td><td>Contig N50 metric</td></tr><tr><td>contig-count</td><td>Contig count metric</td></tr><tr><td rowspan="2">Assembler</td><td>name</td><td>Assembly program used to assemble the genome</td></tr><tr><td>desc</td><td>Program attributes: program name, program version, etc.</td></tr></tbody></table></table-wrap></p></sec><sec id="Sec20"><title>Output Aggregators in Boa<sub>g</sub></title><p id="Par49">Table <xref rid="Tab9" ref-type="table">9</xref> shows the predefined aggregators in the Boa<sub><italic>g</italic></sub> language for example top, mean, maximum, minimum, etc. These aggregators are also available in traditional RDBS and MongoDB [<xref ref-type="bibr" rid="CR27">27</xref>], however Boa<sub><italic>g</italic></sub> is flexible enough to define new aggregators. Boa<sub><italic>g</italic></sub> provides a specific type called output types that collect and aggregate data and provide a single result. When a Boa<sub><italic>g</italic></sub> script is running in parallel, it emits values to the output aggregator that collects all data and provides the final output. Aggregators also can contain indices that would be a grouping operation similar to traditional query languages.
<table-wrap id="Tab9"><label>Table 9</label><caption><p>The BoaG aggregators list</p></caption><table frame="hsides" rules="groups"><thead><tr><th>Aggregator</th><th>Description</th></tr></thead><tbody><tr><td>MeanAggreagtor</td><td>Calculates the average</td></tr><tr><td>MaxAggreagtor</td><td>Finds the maximum value</td></tr><tr><td>SumAggregator</td><td>Calculates the sum of the emitted values to the reducer</td></tr><tr><td>MinAggregator</td><td>Finds the minimum value</td></tr><tr><td>TopAggregator</td><td>Takes an integer argument and returns the top elements for the given argument</td></tr><tr><td>StDevAggregator</td><td>Calculates the standard deviation</td></tr></tbody></table></table-wrap></p></sec></sec><sec id="Sec21"><title>Boa<sub><italic>g</italic></sub> database and new data type integration</title><p id="Par50">The Boa<sub><italic>g</italic></sub> infrastructure is designed to fully utilize data parallelization facilities in Hadoop infrastructure. The raw data for file types and metadata was parsed into a Boa<sub><italic>g</italic></sub> database on top of a Hadoop sequence file (Fig. <xref rid="Fig8" ref-type="fig">8</xref> (b)). A compiler, file reader, and converter were written in Java to generate this database and are provided in the GitHub repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/boalang/bio/tree/master/compiler">https://github.com/boalang/bio/tree/master/compiler</ext-link>). In order to integrate new dataset the data schema in protocol buffer format needs to be modified and a data reader in Java that reads the raw data, for example GFF, TXT, Fastq, etc, is needed that can convert it to a binary format of Boa<sub><italic>g</italic></sub> database. An additional example is provided in the GitHub repository.</p><p id="Par51">Boa<sub><italic>g</italic></sub> efficiency was tested on a shared Hadoop cluster on Bridges with 5 nodes and up to 256 map tasks.</p></sec><sec id="Sec22" sec-type="data-availability"><title>Data availability</title><p id="Par52">All scripts, step by step process of scientific discovery, and additional examples of Boa queries used in this paper can be found in our repository. The raw data files, Boa<sub><italic>g</italic></sub> database and JSON MongoDB files can be obtained from an online repository (<ext-link ext-link-type="uri" xlink:href="https://boalang.github.io/bio/">https://boalang.github.io/bio/</ext-link>). A Docker container with Boa<sub><italic>g</italic></sub> scripts, a Boa<sub><italic>g</italic></sub> sequence file of a subset of the raw files and instructions on how to use Boa<sub><italic>g</italic></sub> can also be downloaded from this location. We have generated a subset of GFF files and assembly statistics files for all fungi data contained in RefSeq. This data subset is 5.4 GB and can be used to test Boa<sub><italic>g</italic></sub> queries for reproducible results.</p></sec><sec id="Sec23"><title>Run Boa<sub><italic>g</italic></sub> on Docker container and Jupyter</title><p id="Par53">For the fungal data subset, users can run a containerized version of a 3 node Hadoop cluster for Boa<sub><italic>g</italic></sub> as well as Jupyter versions on a single machine. These integrations with current technologies can help users test and run queries and reproduce our results. Instructions on how to run a Docker version and a Jupyter version of Boa<sub><italic>g</italic></sub> are available on this website: <ext-link ext-link-type="uri" xlink:href="https://boalang.github.io/bio/">https://boalang.github.io/bio/</ext-link>.</p></sec><sec id="Sec24"><title>Application of Boa<sub><italic>g</italic></sub> to the RefSeq database</title><p id="Par54">A total of 153,848 annotations (GFF), assembly (FASTA) files, and metadata were downloaded from NCBI RefSeq [<xref ref-type="bibr" rid="CR28">28</xref>] and written to a Boa<sub><italic>g</italic></sub> database. Metadata included genome assembly statistics (Genome size, scaffold count, scaffold N50, contig count, contig N50) and assembler software used to generate the assembly from which the genome annotation file was created.</p></sec></sec></body><back><glossary><title>Abbreviations</title><def-list><def-item><term>Boa<sub>g</sub></term><def><p id="Par4">Boa for Genomics</p></def></def-item><def-item><term>DSL</term><def><p id="Par5">Domain-Specific Language</p></def></def-item><def-item><term>RefSeq</term><def><p id="Par6">Reference sequence database</p></def></def-item><def-item><term>SDSI</term><def><p id="Par7">Shared Data Science Infrastructure</p></def></def-item></def-list></glossary><fn-group><fn><p><bold>Publisher&#x02019;s Note</bold></p><p>Springer Nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.</p></fn></fn-group><ack><p>We would like to thank the Bridges supercomputing center for providing support with Hadoop.</p></ack><notes notes-type="author-contribution"><title>Author&#x02019;s contributions</title><p>AJS and UM conceived of the application of Boag to the RefSeq database and contributed to exploring the dataset from a biological perspective. HB wrote the codes, implemented the genomics specific types and customized compiler. He ran analysis and prepared figures. UM provided a first outline of the paper that HB, AJS, and REM later fleshed out before additional rounds of major editing by all authors. HR invented the notion of Shared Data Science Infrastructure (SDSI) [<xref ref-type="bibr" rid="CR29">29</xref>], and the idea of SDSI for genomics data. He also contributed to the design of the Boag domain-specific language for computing over data, and domain-specific types for representing RefSeq data. All the authors read and approved the final manuscript.</p></notes><notes notes-type="funding-information"><title>Funding</title><p>This study was supported by the National Science Foundation under Grant CCF-15-18897 and CNS-15-13263 and the VPR office at Iowa State University. The listed funders played no role in the design of the study, data generation, implementation or in writing the manuscript.</p></notes><notes notes-type="data-availability"><title>Availability of data and materials</title><p>Boa<sub>g</sub> compiler&#x02019;s source code, documentation, Docker container, etc are provided on the GitHub repository (<ext-link ext-link-type="uri" xlink:href="https://github.com/boalang/bio">https://github.com/boalang/bio</ext-link>) The Boa<sub>g</sub> website is located here (<ext-link ext-link-type="uri" xlink:href="https://boalang.github.io/bio/">https://boalang.github.io/bio/</ext-link>).</p></notes><notes><title>Ethics approval and consent to participate</title><p id="Par55">Not applicable.</p></notes><notes><title>Consent for publication</title><p id="Par56">Not applicable.</p></notes><notes notes-type="COI-statement"><title>Competing interests</title><p id="Par57">The authors declare that they have no competing interests.</p></notes><ref-list id="Bib1"><title>References</title><ref id="CR1"><label>1.</label><mixed-citation publication-type="other">Schmidt B, Hildebrandt A. Next-generation sequencing: big data meets high performance computing. Drug Discov Today. 2017.</mixed-citation></ref><ref id="CR2"><label>2.</label><mixed-citation publication-type="other">Terrizzano, I.G., Schwarz, P.M., Roth, M., Colino, J.E.: Data wrangling: The challenging yourney from the wild to the lake. In: CIDR (2015).</mixed-citation></ref><ref id="CR3"><label>3.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Mernik</surname><given-names>M</given-names></name><name><surname>Heering</surname><given-names>J</given-names></name><name><surname>Sloane</surname><given-names>AM</given-names></name></person-group><article-title>When and how to develop domain-specific languages</article-title><source>ACM computing surveys (CSUR)</source><year>2005</year><volume>37</volume><issue>4</issue><fpage>316</fpage><lpage>344</lpage><pub-id pub-id-type="doi">10.1145/1118890.1118892</pub-id></element-citation></ref><ref id="CR4"><label>4.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dyer</surname><given-names>R</given-names></name><name><surname>Nguyen</surname><given-names>HA</given-names></name><name><surname>Rajan</surname><given-names>H</given-names></name><name><surname>Nguyen</surname><given-names>TN</given-names></name></person-group><article-title>Boa: Ultra-large-scale software repository and source-code mining</article-title><source>ACM Transactions on Software Engineering and Methodology (TOSEM)</source><year>2015</year><volume>25</volume><issue>1</issue><fpage>7</fpage><pub-id pub-id-type="doi">10.1145/2803171</pub-id></element-citation></ref><ref id="CR5"><label>5.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Deus</surname><given-names>HF</given-names></name><name><surname>Correa</surname><given-names>MC</given-names></name><name><surname>Stanislaus</surname><given-names>R</given-names></name><name><surname>Miragaia</surname><given-names>M</given-names></name><name><surname>Maass</surname><given-names>W</given-names></name><name><surname>De Lencastre</surname><given-names>H</given-names></name><name><surname>Fox</surname><given-names>R</given-names></name><name><surname>Almeida</surname><given-names>JS</given-names></name></person-group><article-title>S3ql: A distributed domain specific language for controlled semantic integration of life sciences data</article-title><source>BMC bioinformatics</source><year>2011</year><volume>12</volume><issue>1</issue><fpage>285</fpage><pub-id pub-id-type="doi">10.1186/1471-2105-12-285</pub-id><pub-id pub-id-type="pmid">21756325</pub-id></element-citation></ref><ref id="CR6"><label>6.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Prlic&#x000b4;</surname><given-names>A</given-names></name><name><surname>Yates</surname><given-names>A</given-names></name><name><surname>Bliven</surname><given-names>SE</given-names></name><name><surname>Rose</surname><given-names>PW</given-names></name><name><surname>Jacobsen</surname><given-names>J</given-names></name><name><surname>Troshin</surname><given-names>PV</given-names></name><name><surname>Chapman</surname><given-names>M</given-names></name><name><surname>Gao</surname><given-names>J</given-names></name><name><surname>Koh</surname><given-names>CH</given-names></name><name><surname>Foisy</surname><given-names>S</given-names></name><etal/></person-group><article-title>Biojava: an open-source framework for bioinformatics in 2012</article-title><source>Bioinformatics</source><year>2012</year><volume>28</volume><issue>20</issue><fpage>2693</fpage><lpage>2695</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/bts494</pub-id><pub-id pub-id-type="pmid">22877863</pub-id></element-citation></ref><ref id="CR7"><label>7.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Stajich</surname><given-names>JE</given-names></name><name><surname>Block</surname><given-names>D</given-names></name><name><surname>Boulez</surname><given-names>K</given-names></name><name><surname>Brenner</surname><given-names>SE</given-names></name><name><surname>Chervitz</surname><given-names>SA</given-names></name><name><surname>Dagdigian</surname><given-names>C</given-names></name><name><surname>Fuellen</surname><given-names>G</given-names></name><name><surname>Gilbert</surname><given-names>JG</given-names></name><name><surname>Korf</surname><given-names>I</given-names></name><name><surname>Lapp</surname><given-names>H</given-names></name><etal/></person-group><article-title>The bioperl toolkit: Perl modules for the life sciences</article-title><source>Genome Res</source><year>2002</year><volume>12</volume><issue>10</issue><fpage>1611</fpage><lpage>1618</lpage><pub-id pub-id-type="doi">10.1101/gr.361602</pub-id><pub-id pub-id-type="pmid">12368254</pub-id></element-citation></ref><ref id="CR8"><label>8.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Cock</surname><given-names>PJ</given-names></name><name><surname>Antao</surname><given-names>T</given-names></name><name><surname>Chang</surname><given-names>JT</given-names></name><name><surname>Chapman</surname><given-names>BA</given-names></name><name><surname>Cox</surname><given-names>CJ</given-names></name><name><surname>Dalke</surname><given-names>A</given-names></name><name><surname>Friedberg</surname><given-names>I</given-names></name><name><surname>Hamelryck</surname><given-names>T</given-names></name><name><surname>Kauff</surname><given-names>F</given-names></name><name><surname>Wilczynski</surname><given-names>B</given-names></name><etal/></person-group><article-title>Biopython: freely available python tools for computational molecular biology and bioinformatics</article-title><source>Bioinformatics</source><year>2009</year><volume>25</volume><issue>11</issue><fpage>1422</fpage><lpage>1423</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/btp163</pub-id><pub-id pub-id-type="pmid">19304878</pub-id></element-citation></ref><ref id="CR9"><label>9.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Dean</surname><given-names>J</given-names></name><name><surname>Ghemawat</surname><given-names>S</given-names></name></person-group><article-title>Mapreduce: simplified data processing on large clusters</article-title><source>Commun ACM</source><year>2008</year><volume>51</volume><issue>1</issue><fpage>107</fpage><lpage>113</lpage><pub-id pub-id-type="doi">10.1145/1327452.1327492</pub-id></element-citation></ref><ref id="CR10"><label>10.</label><mixed-citation publication-type="other">Hadoop and MongoDB. <ext-link ext-link-type="uri" xlink:href="https://www.mongodb.com/hadoop-and-mongodb">https://www.mongodb.com/hadoop-and-mongodb</ext-link></mixed-citation></ref><ref id="CR11"><label>11.</label><mixed-citation publication-type="other">Genomics England. <ext-link ext-link-type="uri" xlink:href="https://www.genomicsengland.co.uk/">https://www.genomicsengland.co.uk/</ext-link></mixed-citation></ref><ref id="CR12"><label>12.</label><mixed-citation publication-type="other">Turnbull C, Scott RH, Thomas E, Jones L, Murugaesu N, Pretty FB, Halai D, Baple E, Craig C, Hamblin A, et al. The 100000 genomes project: Bringing whole genome sequencing to the nhs. BMJ: British Medical Journal (Online). 2018;361.</mixed-citation></ref><ref id="CR13"><label>13.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Taylor</surname><given-names>RC</given-names></name></person-group><article-title>An overview of the Hadoop/MapReduce/HBase framework and its current applications in bioinformatics</article-title><source>BMC Bioinformatics</source><year>2010</year><volume>11</volume><issue>Suppl 12</issue><fpage>1</fpage><pub-id pub-id-type="doi">10.1186/1471-2105-11-S12-S1</pub-id><pub-id pub-id-type="pmid">20043860</pub-id></element-citation></ref><ref id="CR14"><label>14.</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Mahadik</surname><given-names>K</given-names></name><name><surname>Wright</surname><given-names>C</given-names></name><name><surname>Zhang</surname><given-names>J</given-names></name><name><surname>Kulkarni</surname><given-names>M</given-names></name><name><surname>Bagchi</surname><given-names>S</given-names></name><name><surname>Chaterji</surname><given-names>S</given-names></name></person-group><article-title>Sarvavid: A domain specific language for developing scalable computational genomics applications</article-title><source>Proceedings of the 2016 International Conference on Supercomputing. ICS &#x02018;16</source><year>2016</year><publisher-loc>New York, NY, USA</publisher-loc><publisher-name>ACM</publisher-name><fpage>34</fpage><lpage>13412</lpage></element-citation></ref><ref id="CR15"><label>15.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Altschul</surname><given-names>SF</given-names></name><name><surname>Gish</surname><given-names>W</given-names></name><name><surname>Miller</surname><given-names>W</given-names></name><name><surname>Myers</surname><given-names>EW</given-names></name><name><surname>Lipman</surname><given-names>DJ</given-names></name></person-group><article-title>Basic local alignment search tool</article-title><source>J Mol Biol</source><year>1990</year><volume>215</volume><issue>3</issue><fpage>403</fpage><lpage>410</lpage><pub-id pub-id-type="doi">10.1016/S0022-2836(05)80360-2</pub-id><pub-id pub-id-type="pmid">2231712</pub-id></element-citation></ref><ref id="CR16"><label>16.</label><mixed-citation publication-type="other">Leo S, Santoni F, Zanetti G. Biodoop: bioinformatics on hadoop. In: Parallel Processing Workshops, 2009. ICPPW&#x02019;09. International Conference On: IEEE; 2009. p. 415&#x02013;22.</mixed-citation></ref><ref id="CR17"><label>17.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Niemenmaa</surname><given-names>M</given-names></name><name><surname>Kallio</surname><given-names>A</given-names></name><name><surname>Schumacher</surname><given-names>A</given-names></name><name><surname>Klemel&#x000e4;</surname><given-names>P</given-names></name><name><surname>Korpelainen</surname><given-names>E</given-names></name><name><surname>Heljanko</surname><given-names>K</given-names></name></person-group><article-title>Hadoop-bam: directly manipulating next generation sequencing data in the cloud</article-title><source>Bioinformatics</source><year>2012</year><volume>28</volume><issue>6</issue><fpage>876</fpage><lpage>877</lpage><pub-id pub-id-type="doi">10.1093/bioinformatics/bts054</pub-id><?supplied-pmid 22302568?><pub-id pub-id-type="pmid">22302568</pub-id></element-citation></ref><ref id="CR18"><label>18.</label><element-citation publication-type="book"><person-group person-group-type="author"><name><surname>Sadasivam</surname><given-names>GS</given-names></name><name><surname>Baktavatchalam</surname><given-names>G</given-names></name></person-group><article-title>A novel approach to multiple sequence alignment using hadoop data grids</article-title><source>Proceedings of the 2010 Workshop on Massive Data Analytics on the Cloud. MDAC &#x02018;10</source><year>2010</year><publisher-loc>New York, NY, USA</publisher-loc><publisher-name>ACM</publisher-name><fpage>2</fpage><lpage>127</lpage></element-citation></ref><ref id="CR19"><label>19.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Langmead</surname><given-names>B</given-names></name><name><surname>Hansen</surname><given-names>KD</given-names></name><name><surname>Leek</surname><given-names>JT</given-names></name></person-group><article-title>Cloud-scale RNA-sequencing differential expression analysis with Myrna</article-title><source>Genome Biol</source><year>2010</year><volume>11</volume><issue>8</issue><fpage>83</fpage><pub-id pub-id-type="doi">10.1186/gb-2010-11-8-r83</pub-id></element-citation></ref><ref id="CR20"><label>20.</label><mixed-citation publication-type="other">Alnasir J, Shanahan H. The application of hadoop in structural bioinformatics. BioRxiv. 2018;376467.</mixed-citation></ref><ref id="CR21"><label>21.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Islam</surname><given-names>Md Johirul</given-names></name><name><surname>Sharma</surname><given-names>Anuj</given-names></name><name><surname>Rajan</surname><given-names>Hridesh</given-names></name></person-group><article-title>A Cyberinfrastructure for Big Data Transportation Engineering</article-title><source>Journal of Big Data Analytics in Transportation</source><year>2019</year><volume>1</volume><issue>1</issue><fpage>83</fpage><lpage>94</lpage><pub-id pub-id-type="doi">10.1007/s42421-019-00006-8</pub-id></element-citation></ref><ref id="CR22"><label>22.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Smedley</surname><given-names>D</given-names></name><name><surname>Haider</surname><given-names>S</given-names></name><name><surname>Ballester</surname><given-names>B</given-names></name><name><surname>Holland</surname><given-names>R</given-names></name><name><surname>London</surname><given-names>D</given-names></name><name><surname>Thorisson</surname><given-names>G</given-names></name><name><surname>Kasprzyk</surname><given-names>A</given-names></name></person-group><article-title>Biomart&#x02013;biological queries made easy</article-title><source>BMC Genomics</source><year>2009</year><volume>10</volume><issue>1</issue><fpage>22</fpage><pub-id pub-id-type="doi">10.1186/1471-2164-10-22</pub-id><pub-id pub-id-type="pmid">19144180</pub-id></element-citation></ref><ref id="CR23"><label>23.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Drost</surname><given-names>H-G</given-names></name><name><surname>Paszkowski</surname><given-names>J</given-names></name></person-group><article-title>Biomartr: genomic data retrieval with r</article-title><source>Bioinformatics</source><year>2017</year><volume>33</volume><issue>8</issue><fpage>1216</fpage><lpage>1217</lpage><?supplied-pmid 28110292?><pub-id pub-id-type="pmid">28110292</pub-id></element-citation></ref><ref id="CR24"><label>24.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Koonin</surname><given-names>EV</given-names></name><name><surname>Wolf</surname><given-names>YI</given-names></name></person-group><article-title>Genomics of bacteria and archaea: the emerging dynamic view of the prokaryotic world</article-title><source>Nucleic Acids Res</source><year>2008</year><volume>36</volume><issue>21</issue><fpage>6688</fpage><lpage>6719</lpage><pub-id pub-id-type="doi">10.1093/nar/gkn668</pub-id><pub-id pub-id-type="pmid">18948295</pub-id></element-citation></ref><ref id="CR25"><label>25.</label><mixed-citation publication-type="other">Dede E, Govindaraju M, Gunter D, Canon RS, Ramakrishnan L. In: Proceedings of the 4th ACM Workshop on Scientific Cloud Computing, editor. Performance evaluation of a mongodb and hadoop platform for scientific data analysis: ACM; 2013. p. 13&#x02013;20.</mixed-citation></ref><ref id="CR26"><label>26.</label><mixed-citation publication-type="other">Generic Feature Format Version 3. <ext-link ext-link-type="uri" xlink:href="http://gmod.org/wiki/GFF3">http://gmod.org/wiki/GFF3</ext-link></mixed-citation></ref><ref id="CR27"><label>27.</label><mixed-citation publication-type="other">Chodorow K. MongoDB: the Definitive Guide: Powerful and Scalable Data Storage: O&#x02019;Reilly Media, Inc.", ??? 2013.</mixed-citation></ref><ref id="CR28"><label>28.</label><element-citation publication-type="journal"><person-group person-group-type="author"><name><surname>Pruitt</surname><given-names>KD</given-names></name><name><surname>Tatusova</surname><given-names>T</given-names></name><name><surname>Maglott</surname><given-names>DR</given-names></name></person-group><article-title>Ncbi reference sequences (refseq): a curated non-redundant sequence database of genomes, transcripts and proteins</article-title><source>Nucleic Acids Res</source><year>2006</year><volume>35</volume><issue>suppl_1</issue><fpage>61</fpage><lpage>65</lpage></element-citation></ref><ref id="CR29"><label>29.</label><mixed-citation publication-type="other">Rajan H. Bridging the digital divide in data science. In: SPLASH/SPLASH-I&#x02019;17: The ACM SIGPLAN Conference on Systems, Programming, Languages and Applications: Software for Humanity; 2017.</mixed-citation></ref></ref-list></back></article>